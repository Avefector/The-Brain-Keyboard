/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  FileChuckerModal: () => FileChuckerModal,
  default: () => FileChuckerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  proceedToNextFileInFolder: false,
  debugMode: false
};
var FileChuckerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "move-to-new-or-existing-folder",
      name: "Move to new or existing folder",
      checkCallback: (checking) => {
        if (checking) {
          return !!this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        }
        let view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (!view || !(view instanceof import_obsidian.MarkdownView))
          return;
        const currentFile = view.file;
        new FileChuckerModal(this.app, currentFile, this.settings).open();
      }
    });
    this.addSettingTab(new FileChuckerSettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var FileChuckerModal = class extends import_obsidian.SuggestModal {
  constructor(app2, currentFile, settings) {
    super(app2);
    this.showingNoSuggestions = false;
    this.vault = app2.vault;
    this.currentFile = currentFile;
    this.settings = settings;
    this.currentFilePath = this.vault.getResourcePath(this.currentFile);
    this.inputListener = this.listenInput.bind(this);
  }
  onOpen() {
    this.inputEl.addEventListener("keydown", this.inputListener);
    super.onOpen();
  }
  onClose() {
    this.inputEl.removeEventListener("keydown", this.inputListener);
  }
  listenInput(evt) {
    if (evt.key === "Tab") {
      this.setSelectedEntryToTextEntryField();
    }
  }
  setSelectedEntryToTextEntryField() {
    this.inputEl.value = this.getSelectedEntryPath();
  }
  getSelectedEntryPath() {
    const selectedItem = this.modalEl.getElementsByClassName("is-selected");
    return selectedItem.length > 0 ? selectedItem[0].getText() : "";
  }
  getSuggestions(query) {
    if (this.showingNoSuggestions) {
      this.showingNoSuggestions = false;
    }
    const allMarkdownFiles = this.vault.getMarkdownFiles();
    const allFolders = allMarkdownFiles.map((file) => file.parent).unique();
    return allFolders.filter((file) => file.path.toLowerCase().includes(query.toLowerCase()));
  }
  onNoSuggestion() {
    this.showingNoSuggestions = true;
    const resultsBlock = this.modalEl.getElementsByClassName("prompt-results");
    if (resultsBlock.length > 0) {
      const resultBox = resultsBlock[0];
      resultBox.empty();
      resultBox.createEl("div", {
        text: "Create folder and move file to it",
        cls: "suggestion-empty"
      });
    }
  }
  renderSuggestion(folder, el) {
    el.createEl("div", { text: folder.path });
  }
  selectSuggestion(folder, evt) {
    const originalFolder = this.currentFile.parent;
    const specifiedFolderPath = this.showingNoSuggestions ? this.inputEl.value : folder.path;
    (async () => {
      const targetFolder = app.vault.getAbstractFileByPath(specifiedFolderPath);
      if (targetFolder === null) {
        if (this.settings.debugMode) {
          console.log(`${specifiedFolderPath} does not exist. Creating now...`);
        }
        await app.vault.createFolder(specifiedFolderPath);
      }
      const newFilePath = specifiedFolderPath + "/" + this.currentFile.name;
      if (this.settings.debugMode) {
        console.log(`Moving ${this.currentFile.path} to ${newFilePath}`);
      }
      await app.fileManager.renameFile(this.currentFile, newFilePath);
      if (this.settings.proceedToNextFileInFolder) {
        const isAFile = (thing) => {
          return thing instanceof import_obsidian.TFile;
        };
        if (this.settings.debugMode) {
          console.log(`Auto-proceeding to the next file.`);
        }
        const nextFile = originalFolder.children.filter(isAFile);
        if (nextFile.length > 0) {
          const newLeaf = app.workspace.getLeaf();
          const toOpen = nextFile[0];
          if (this.settings.debugMode) {
            console.log(`Opening ${toOpen.path}`);
          }
          await newLeaf.openFile(toOpen);
        } else {
          if (this.settings.debugMode) {
            console.log(`Nothing to open. Folder is now empty.`);
          }
          new import_obsidian.Notice("Folder now empty.");
        }
      }
    })();
    this.close();
  }
  onChooseSuggestion(item, evt) {
    throw new Error("Method not implemented.");
  }
};
var FileChuckerSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", {
      text: "Options for File Chucker"
    });
    new import_obsidian.Setting(containerEl).setName("Automatically proceed to the next file").setDesc("Allows you to process a folder like an Inbox quickly.").addToggle((setting) => {
      setting.setValue(this.plugin.settings.proceedToNextFileInFolder).onChange(async (value) => {
        this.plugin.settings.proceedToNextFileInFolder = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Enable debug mode").setDesc("Prints out message in the Console to help diagnose issues with this plugin.").addToggle((setting) => {
      setting.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
        this.plugin.settings.debugMode = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
