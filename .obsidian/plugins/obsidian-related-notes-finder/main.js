/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    appendLink: true,
    filterWords: 'the,and,but,not,then,they,will,not,your,from,them,was,with,what,who,why,where,this,over,than',
    dailies: '',
    minLetters: 3,
};
class RelatedNotesPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading Related Notes plugin');
            yield this.loadSettings();
            const getPossibleLinks = () => __awaiter(this, void 0, void 0, function* () {
                let files = this.app.vault.getFiles();
                let activeView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                if (!activeView)
                    return null;
                let fileData = yield this.app.vault.cachedRead(activeView.file);
                fileData = fileData ? fileData : "";
                const selectedRange = activeView.editor.getSelection();
                fileData = selectedRange || fileData.replace(/\W+/g, " ");
                let fileTextItems = fileData.split(" ");
                fileTextItems = [...new Set(fileTextItems)];
                fileTextItems = fileTextItems.map(text => text.replace(/\s+/g, ""))
                    .filter(t => t.length > this.settings.minLetters && this.settings.filterWords.toLowerCase().split(",").indexOf(t.toLowerCase()) == -1);
                let keywords = {};
                fileTextItems.forEach(text => {
                    text = text.toLowerCase();
                    files.forEach(file => {
                        if ((this.settings.dailies == '' || (this.settings.dailies != '' && file.path.indexOf(this.settings.dailies) == -1))
                            && file.extension == "md"
                            && file.basename.toLowerCase().indexOf(text) > -1) {
                            if (keywords[text] === undefined) {
                                keywords[text] = [];
                            }
                            keywords[text].push(file);
                        }
                    });
                });
                new KeywordsModal(this.app, keywords, this.settings).open();
            });
            this.addCommand({
                id: 'show-possible-links',
                name: 'Show Possible Links',
                callback: getPossibleLinks,
                hotkeys: [
                    {
                        modifiers: ["Mod"],
                        key: "6"
                    }
                ]
            });
            this.addCommand({
                id: 'toggle-append-link',
                name: 'Toggle Append Link Setting',
                callback: () => {
                    this.settings.appendLink = !this.settings.appendLink;
                    this.saveSettings();
                    let status = this.settings.appendLink ? 'On' : 'Off';
                    new obsidian.Notice(`Append Link setting is now ${status}`);
                }
            });
            this.addSettingTab(new RelatedNotesSettingTab(this.app, this));
        });
    }
    onunload() {
        console.log('unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class KeywordsModal extends obsidian.Modal {
    constructor(app, keywords, settings) {
        super(app);
        this.keywords = keywords;
        this.settings = settings;
    }
    onOpen() {
        let { contentEl } = this;
        let modalContainer = contentEl.createDiv();
        let keys = Object.keys(this.keywords);
        modalContainer.createEl("h3", { text: `${keys.length} keywords found` });
        let section = modalContainer.createDiv({ cls: 'possible-links-container' });
        keys.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
        keys.map(keyword => {
            let noteContainer = section.createEl("p");
            let noteLink = noteContainer.createEl("a", {
                cls: 'possible-link-item',
                text: `${keyword} - ${this.keywords[keyword].length} notes found`
            });
            noteLink.addEventListener('click', () => {
                new PossibleLinksModal(this.app, this.keywords[keyword], this.keywords, this.settings).open();
                this.close();
            });
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
class PossibleLinksModal extends obsidian.Modal {
    constructor(app, links, keywords, settings) {
        super(app);
        this.links = links;
        this.keywords = keywords;
        this.settings = settings;
    }
    onOpen() {
        let { contentEl } = this;
        let backBtn = contentEl.createEl("a", { text: '< Back to Keywords', cls: 'possible-link-item' });
        (this.links.length == 0)
            ? contentEl.createEl('h3', { text: '0 Notes Found' })
            : contentEl.createEl('h3', { text: `${this.links.length} notes found` });
        let modalContainer = contentEl.createDiv({ cls: 'possible-links-container' });
        backBtn.addEventListener('click', () => {
            new KeywordsModal(this.app, this.keywords, this.settings).open();
            this.close();
        });
        this.links.map((link) => {
            let noteLink = modalContainer.createEl("p").createEl("a", { text: link.path, cls: 'possible-link-item' });
            noteLink.addEventListener('click', (e) => __awaiter(this, void 0, void 0, function* () {
                let activeFile = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                if (activeFile && this.settings.appendLink) {
                    let fileData = yield this.app.vault.read(activeFile.file);
                    this.app.vault.modify(activeFile.file, fileData + `\n[[${link.basename}]]`);
                    new obsidian.Notice(`Added link [[${link.basename}]] to end of '${activeFile.file.basename}'`);
                }
                if (e.metaKey) {
                    let newLeaf = this.app.workspace.splitActiveLeaf('vertical');
                    newLeaf.openFile(link);
                }
                else {
                    const currentLeaf = this.app.workspace.activeLeaf;
                    currentLeaf.openFile(link);
                }
                this.close();
            }));
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
class RelatedNotesSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Related Notes Finder' });
        // Possible Links
        containerEl.createEl('h3', { text: 'Possible Links' });
        new obsidian.Setting(containerEl)
            .setName('Append Link')
            .setDesc('Adds the selected link to the currently open note')
            .addToggle(value => {
            value
                .setValue(this.plugin.settings.appendLink)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.appendLink = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName('Minimum Letters')
            .setDesc('Minimum letter count for a word when searching for related notes.')
            .addText(text => text
            .setPlaceholder('3')
            .setValue(this.plugin.settings.minLetters.toString())
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.minLetters = parseInt(value);
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Ignore Dailies Path')
            .setDesc('Specify folder of Daily Journal to ignore these notes when searching for possible links. (leave blank to include dailies in possible links)')
            .addText(text => text
            .setPlaceholder('dailies')
            .setValue(this.plugin.settings.dailies)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.dailies = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Filtered Words')
            .setDesc('Words filtered when searching for related notes. (separated by comma, no spaces)')
            .addTextArea(text => {
            text
                .setPlaceholder('and,but,they...')
                .setValue(this.plugin.settings.filterWords)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.filterWords = value;
                yield this.plugin.saveSettings();
            }));
            text.inputEl.rows = 10;
            text.inputEl.cols = 25;
        });
    }
}

module.exports = RelatedNotesPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
