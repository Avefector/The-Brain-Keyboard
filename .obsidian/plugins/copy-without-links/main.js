/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => StripLinks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var StripLinks = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "strip-links-from-selection",
      name: "Selection (to clipboard)",
      editorCheckCallback: (checking, editor, view) => {
        if (checking) {
          return editor.getSelection().length > 0;
        }
        const text = editor.getSelection();
        if (text.length === 0) {
          new import_obsidian.Notice("Cannot strip internal links from selection: selection empty");
          return;
        }
        const strippedText = this.stripText(text);
        navigator.clipboard.writeText(strippedText);
        new import_obsidian.Notice("Selection copied with internal links stripped");
      }
    });
    this.addCommand({
      id: "strip-links-entire-file",
      name: "Entire file (to clipboard)",
      editorCallback: (editor, view) => {
        const text = editor.getValue();
        const strippedText = this.stripText(text);
        navigator.clipboard.writeText(strippedText);
        new import_obsidian.Notice("File copied with internal links stripped");
      }
    });
    this.addCommand({
      id: "strip-links-from-selection-in-place",
      name: "Selection (in place)",
      editorCheckCallback: (checking, editor, view) => {
        if (checking) {
          return editor.getSelection().length > 0;
        }
        const text = editor.getSelection();
        if (text.length === 0) {
          new import_obsidian.Notice("Cannot strip internal links from selection: selection empty");
          return;
        }
        const strippedText = this.stripText(text);
        editor.replaceSelection(strippedText);
      }
    });
    this.addCommand({
      id: "strip-links-entire-file-in-place",
      name: "Entire file (in place)",
      editorCallback: (editor, view) => {
        const text = editor.getValue();
        const strippedText = this.stripText(text);
        editor.setValue(strippedText);
      }
    });
  }
  stripText(s) {
    return s.replace(/\[\[([^[\]]*?)\|([^[\]]*?)\]\]/g, "$2").replace(/\[\[([^[\]]*?)\]\]/g, "$1").replace(/\[(.*?)\]\((.*?)\)/g, (match, text, link) => {
      if (!link.match(/[a-z0-9]+:/)) {
        return text;
      }
      return match;
    });
  }
};
