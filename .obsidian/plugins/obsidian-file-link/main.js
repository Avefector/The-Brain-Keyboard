/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var fs = require('fs');
var path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var DEFAULT_SETTINGS = {
    linkPrefix: "",
    showFileEnding: false,
    linkFolder: false,
    embedFile: false,
    shortLinks: false
};
var SUPPORTED_EMBED_FILE_TYPES = [
    "md",
    "png",
    "jpg",
    "jpeg",
    "gif",
    "bmp",
    "svg",
    "mp3",
    "webm",
    "wav",
    "m4a",
    "ogg",
    "3gp",
    "flac",
    "mp4",
    "webm",
    "ogv",
    "pdf",
];

var FileLinkSettingTab = /** @class */ (function (_super) {
    __extends(FileLinkSettingTab, _super);
    function FileLinkSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    FileLinkSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Better File Link Settings" });
        new obsidian.Setting(containerEl)
            .setName("List style for multiple files")
            .setDesc("Specify the characters shown before every file link.")
            .addText(function (text) {
            return text
                .setPlaceholder("-")
                .setValue(_this.plugin.settings.linkPrefix)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.linkPrefix = value;
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName("Show file extension")
            .setDesc("Will show file endings when activated.")
            .addToggle(function (toggle) {
            return toggle
                .setValue(_this.plugin.settings.showFileEnding)
                .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.showFileEnding = toggle.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName("Embed file")
            .setDesc("Will copy the file to Obsidian and embed it in the note.")
            .addToggle(function (toggle) {
            return toggle.setValue(_this.plugin.settings.embedFile).onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.embedFile = toggle.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName("Link folder instead of file")
            .setDesc("Link will open the folder where the file is located instead of opening the file itself.")
            .addToggle(function (toggle) {
            return toggle.setValue(_this.plugin.settings.linkFolder).onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.linkFolder = toggle.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName("Use short links")
            .setDesc("Use short links instead of long links.")
            .addToggle(function (toggle) {
            return toggle.setValue(_this.plugin.settings.shortLinks).onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.shortLinks = toggle.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    };
    return FileLinkSettingTab;
}(obsidian.PluginSettingTab));

var FileEmbeder = /** @class */ (function () {
    function FileEmbeder(attachementFolder, basePath, settings) {
        this.attachementFolder = attachementFolder;
        this.basePath = basePath;
        this.settings = settings;
    }
    FileEmbeder.prototype.embedFile = function (file) {
        var _a;
        var fileType = (_a = file.name.split(".").pop()) !== null && _a !== void 0 ? _a : "";
        if (SUPPORTED_EMBED_FILE_TYPES.contains(fileType)) {
            if (!this.attachementFolder) {
                this.attachementFolder = "";
            }
            //@ts-ignore
            this.copyFile(file.path, this.basePath + "/" + this.attachementFolder);
        }
        else {
            new obsidian.Notice("This file type (" + fileType + ") is not supported for embed.");
        }
    };
    FileEmbeder.prototype.embedLinkFor = function (file) {
        var filename = this.pathInfo(file).filename;
        return "![[" + filename + "]]";
    };
    FileEmbeder.prototype.copyFile = function (file, dir2) {
        var f = path__default['default'].basename(file);
        var source = fs__default['default'].createReadStream(file);
        var dest = fs__default['default'].createWriteStream(path__default['default'].resolve(dir2, f));
        source.pipe(dest);
        source.on("end", function () {
            console.log("Succesfully copied");
        });
        source.on("error", function (err) {
            console.log(err);
        });
    };
    FileEmbeder.prototype.pathInfo = function (file) {
        var _a;
        //@ts-ignore
        var path = file.path;
        var pathComponents = path.split("/");
        if (path.contains("\\")) {
            pathComponents = path.split("\\");
        }
        var filename = (_a = pathComponents.pop()) !== null && _a !== void 0 ? _a : "";
        return { path: path, pathComponents: pathComponents, filename: filename };
    };
    FileEmbeder.prototype.linkFor = function (file, printPrefix) {
        var _a = this.pathInfo(file), path = _a.path, pathComponents = _a.pathComponents, linkName = _a.filename;
        var prefixString = "";
        if (!this.settings.showFileEnding) {
            var filenameComponents = linkName.split(".");
            filenameComponents.pop();
            linkName = filenameComponents.join(".");
        }
        if (this.settings.linkFolder) {
            linkName = pathComponents[pathComponents.length - 1]; // .peek()
            path = pathComponents.join("/");
        }
        if (printPrefix) {
            prefixString = this.settings.linkPrefix;
        }
        if (this.settings.shortLinks) {
            return prefixString + "[" + linkName + "](<file:///" + path + ">)\n";
        }
        return (prefixString +
            "[" +
            linkName +
            "](file:///" +
            encodeURIComponent(path) +
            ")\n");
    };
    return FileEmbeder;
}());

var FileLinkModal = /** @class */ (function (_super) {
    __extends(FileLinkModal, _super);
    function FileLinkModal(app, plugin) {
        var _this = _super.call(this, app) || this;
        _this.plugin = plugin;
        return _this;
    }
    FileLinkModal.prototype.onOpen = function () {
        var _this = this;
        var contentEl = this.contentEl;
        contentEl.createEl("h2", { text: "Select files:" });
        var input = contentEl.createEl("input", {
            type: "file",
            attr: { multiple: "" }
        });
        contentEl.createEl("br");
        contentEl.createEl("br");
        var checkboxEmbed = contentEl.createEl("input", {
            type: "checkbox",
            attr: { id: "embed" }
        });
        contentEl.createEl("label", { text: "Embed file", attr: { "for": "embed" } });
        contentEl.createEl("br");
        var checkboxFileFolder = contentEl.createEl("input", {
            type: "checkbox",
            attr: { id: "file-folder" }
        });
        contentEl.createEl("label", {
            text: "Link folder",
            attr: { "for": "file-folder" }
        });
        contentEl.createEl("br");
        var checkboxFileEnding = contentEl.createEl("input", {
            type: "checkbox",
            attr: { id: "file-ending" }
        });
        contentEl.createEl("label", {
            text: "Show file extension",
            attr: { "for": "file-ending" }
        });
        contentEl.createEl("br");
        var checkboxShortLink = contentEl.createEl("input", {
            type: "checkbox",
            attr: { id: "short-link" }
        });
        contentEl.createEl("label", {
            text: "Use short links",
            attr: { "for": "short-link" }
        });
        contentEl.createEl("br");
        contentEl.createEl("br");
        contentEl.createEl("br");
        checkboxFileEnding.checked = this.plugin.settings.showFileEnding;
        checkboxFileFolder.checked = this.plugin.settings.linkFolder;
        checkboxEmbed.checked = this.plugin.settings.embedFile;
        checkboxShortLink.checked = this.plugin.settings.shortLinks;
        var button = contentEl.createEl("button", { text: "Add file link" });
        button.addEventListener("click", function () {
            var embedFile = checkboxEmbed.checked;
            var fileList = input.files;
            if (fileList) {
                var files_1 = Array.from(fileList);
                _this.plugin.settings.linkFolder = checkboxFileFolder.checked;
                _this.plugin.settings.showFileEnding = checkboxFileEnding.checked;
                _this.plugin.settings.embedFile = embedFile;
                _this.plugin.settings.shortLinks = checkboxShortLink.checked;
                //@ts-ignore
                var attachementFolder = _this.app.vault.config.attachmentFolderPath;
                //@ts-ignore
                var basePath = _this.app.vault.adapter.basePath;
                var fe_1 = new FileEmbeder(attachementFolder, basePath, _this.plugin.settings);
                if (embedFile) {
                    files_1.forEach(function (file) {
                        fe_1.embedFile(file);
                        var embedLinkToFile = fe_1.embedLinkFor(file);
                        _this.addAtCursor(embedLinkToFile);
                    });
                }
                else {
                    var linkString_1 = "";
                    files_1.forEach(function (file) {
                        if (files_1.length != 1) {
                            linkString_1 = linkString_1 + fe_1.linkFor(file, true);
                        }
                        else {
                            linkString_1 = linkString_1 + fe_1.linkFor(file, false);
                        }
                    });
                    _this.addAtCursor(linkString_1);
                }
                _this.close();
                new obsidian.Notice("Added File Link");
            }
            else {
                new obsidian.Notice("No files selected");
            }
        });
    };
    FileLinkModal.prototype.addAtCursor = function (s) {
        var mdView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (mdView) {
            var doc = mdView.editor;
            var currentLine = doc.getCursor();
            doc.replaceRange(s, currentLine, currentLine);
        }
    };
    FileLinkModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return FileLinkModal;
}(obsidian.Modal));

var FileLink = /** @class */ (function (_super) {
    __extends(FileLink, _super);
    function FileLink() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FileLink.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("loading plugin file-link");
                        return [4 /*yield*/, this.loadSettings()];
                    case 1:
                        _a.sent();
                        this.addSettingTab(new FileLinkSettingTab(this.app, this));
                        this.addCommand({
                            id: "add-file-link",
                            name: "Add File Link",
                            editorCallback: function () {
                                new FileLinkModal(_this.app, _this).open();
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    FileLink.prototype.onunload = function () {
        console.log("unloading plugin file-link");
    };
    FileLink.prototype.loadSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _a = this;
                        _c = (_b = Object).assign;
                        _d = [{}, DEFAULT_SETTINGS];
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = _c.apply(_b, _d.concat([_e.sent()]));
                        return [2 /*return*/];
                }
            });
        });
    };
    FileLink.prototype.saveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return FileLink;
}(obsidian.Plugin));

module.exports = FileLink;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
